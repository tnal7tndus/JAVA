<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapperInterface.BoardMapper">

<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  
** interface를 통해 ..~Mapper 접근
=> interface ..~Mapper.java 의 패키지명 & 화일명과  
   ..~Mapper.xml의 패키지명 & 화일명 & namespace 값은 같아야됨. 
   
=> namespace: 자바클래스에서 mapper를 찾는 경로
           	  다른 mapper와 중복되지 않도록 네임스페이스 기재   

*** mapper 기본문법 
1) #{id} : parameter로 전달된 dto의 id라는 컬럼의 value가 전달됨  
           -> getId()로 처리함, Map의 경우 키값이 id인 값을 찾음.
          
2) ${id} : 필드를 표현 (매개변수로 전달된 객체의 id 컬럼의 값을 table의 컬럼으로 인식하고 적용함)    
         
3) CDATA : XML에서는  <,>등 비교연산자의 경우 XML규칙상 에러 나기 때문에,
           이 기호를 연산자로 인식하도록 하기 위해서는 SQL문을 CDATA로 묶어 주어야 한다.
         
           <![CDATA[ SELECT * FROM table WHERE jno < 5 ]]>
         
4) 조건문, 반복문, sql, include, selectKey 등          
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

<!-- Board_Paging
	=> MySql : Limit 구문 사용
		ex) Limit a, b (a개를 제외하고 b개 : a+1부터 b개)
	=> Oracle : Between 사용
		ex) Between a And b (a부터 b까지)
 -->
	<select id="bPageList" resultType="com.ncs.spring02.domain.BoardDTO">
		select * from board
		order by root desc, step asc
		limit #{sno}, #{rowsPerPage}
	</select>
	<select id="totalRowsCount" resultType="int">
		select count(*) from board
	</select>

<!-- selectList -->
	<select id="selectList" resultType="com.ncs.spring02.domain.BoardDTO">
		select * from board order by root desc, step asc, seq desc
	</select>
	
<!-- selectOne -->
	<select id="selectOne" resultType="com.ncs.spring02.domain.BoardDTO">
		select * from board where seq=#{seq}
	</select>
	
<!-- ** selectKey Test 
=> AutoNumbering을 편리하게 할 수 있도록 지원
=> DB작업 중 먼저 어떤 키값을 가져와서 증가시켜서 입력하거나 혹은 입력후에 증가된 키값을 가져올 필요가 있을때마다
   selectKey Tag를 이용하면 별도의 쿼리로직없이 해당 메소드에서 일괄처리할 수가 있음
   - keyProperty: selectKey구문의 결과가 셋팅될 대상을 지정
               ( 즉, 매개변수로 전달된 dto의 컬럼중 결과가 셋팅될 컬럼 선택 )     
   - resultType: 결과의 타입
   - order: BEFORE 또는 AFTER
            BEFORE로 설정하면 키를 먼저 조회하고 그 값을 keyProperty 에 셋팅한 뒤 insert 구문실행
            AFTER로 설정하면 insert 구문을 실행한 뒤 selectKey 구문 실행
            오라클에서는 insert구문 내부에서 일관된 호출형태로 처리한다
   - statementType: STATEMENT, PREPARED 또는 CALLABLE 중 하나 선택가능
           마이바티스에게 Statement, PreparedStatement 또는 CallableStatement를 사용하게한다
           디폴트는 PREPARED
     
=> Oracle의 경우:  (select nvl(max(seq),0)+1 from board)  
-->

<!-- insert : 원글입력
	=> 원글 입력 : seq 와 root 동일, cnt=0, step=0, indent=0 -->
	<!-- <insert id="insert">
		Insert Into board Values((select * from (select IFNULL(max(seq),0)+1 from board) as temp),"
				+ "#{id},#{title},#{content}, Current_TimeStamp ,0, (select * from (select IFNULL(max(seq),0)+1 from board) as temp)
	</insert> -->
	<insert id="insert">
		<selectKey keyProperty="seq" resultType="int" order="BEFORE">
			select IFNULL(max(seq),0)+1 from board
		</selectKey>
		insert into board(seq,id,title,content,root)
		values (#{seq},#{id},#{title},#{content},#{seq})
	</insert>
	
<!-- rinsert : 답글입력
	=> seq 자동생성, root, step, indent는 dto로 전달, cnt = 0
	=> stepUpdate -->
	<!-- <insert id="rinsert">
		Insert Into board(seq,id,title,content,root,step,indent) values("
				+"(select * from (select IFNULL(max(seq),0)+1 from board) as temp)"
				+ ",#{id},#{title},#{content},#{root},#{step},#{indent})
	</insert> -->
	<insert id="rinsert">
		<selectKey keyProperty="seq" resultType="int" order="BEFORE">
			select * from (select IFNULL(max(seq),0)+1 from board
		</selectKey>
		insert Into board(seq,id,title,content,root,step,indent)
		values(#{seq},#{id},#{title},#{content},#{root},#{step},#{indent})
	</insert>
	
<!-- stepUpdate : step 값 증가
	=> 조건 : root 동일 and step >= and 직전 입력된 새글 제외
	=> 그러므로 selectKey가 필요함 -->
	<!-- <update id="setUpdate">
		update board set step=step+1 where root>=#{root} and step>=#{step} "
				+ "and seq <> (select * from (select IFNULL(max(seq),0) from board) as temp)"
	</update> -->
	<update id="stepUpdate">
		<selectKey keyProperty="seq" resultType="int" order="BEFORE">
			select IFNULL(max(seq),0) from board
		</selectKey>
		update board set step=step+1
		where root=#{root} and step>=#{step} and seq!=#{seq]
	</update>

<!-- update -->
	<update id="update">
		Update board set title=#{title}, content=#{content}, cnt=#{cnt} where seq=#{seq}
	</update>

<!-- delete
	=> 원글(seq == root) : ~ where root =? (모든 답글도 동시에 삭제)
	=> 답글(seq != root) : ~ where seq=?  -->
	<delete id="delete">
		delete from board where
		<if test="seq==root">root=#{seq}</if>
		<!-- 원글삭제 : 동일 root 자료 모두 삭제 -->
		<if test="seq!=root">seq=#{seq}</if>
		<!-- 해당 답글만 삭제 -->
	</delete>


</mapper>